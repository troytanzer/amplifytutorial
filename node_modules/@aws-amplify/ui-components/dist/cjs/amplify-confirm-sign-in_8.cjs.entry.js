'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const index = require('./index-dbc7c762.js');
const core = require('@aws-amplify/core');
const authTypes = require('./auth-types-cd1f71d2.js');
const Translations = require('./Translations-dee5b953.js');
const constants = require('./constants-1eabe1d8.js');
const Auth = require('@aws-amplify/auth');
const Auth__default = _interopDefault(Auth);
const helpers = require('./helpers-2364e61e.js');

const AmplifyConfirmSignIn = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Fires when confirm sign in form is submitted */
        this.handleSubmit = event => this.confirm(event);
        /** Used for header text in confirm sign in component */
        this.headerText = core.I18n.get(Translations.Translations.CONFIRM_SMS_CODE);
        /** Used for the submit button text in confirm sign in component */
        this.submitButtonText = core.I18n.get(Translations.Translations.CONFIRM);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /**
         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.
         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing
         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.
         * ```
         * [
         *  {
         *    type: string,
         *    label: string,
         *    placeholder: string,
         *    hint: string | Functional Component | null,
         *    required: boolean
         *  }
         * ]
         * ```
         */
        this.formFields = [
            {
                type: 'code',
                required: true,
                handleInputChange: event => this.handleCodeChange(event),
            },
        ];
        /** The MFA option to confirm with */
        this.mfaOption = authTypes.MfaOption.SMS;
        /* Whether or not the confirm-sign-in component is loading */
        this.loading = false;
    }
    componentWillLoad() {
        if (this.user && this.user['challengeName'] === authTypes.ChallengeName.SoftwareTokenMFA) {
            this.mfaOption = authTypes.MfaOption.TOTP;
            // If header text is using default use TOTP string
            if (this.headerText === core.I18n.get(Translations.Translations.CONFIRM_SMS_CODE)) {
                this.headerText = core.I18n.get(Translations.Translations.CONFIRM_TOTP_CODE);
            }
        }
    }
    handleCodeChange(event) {
        this.code = event.target.value;
    }
    checkContact(user) {
        if (!Auth.Auth || typeof Auth.Auth.verifiedContact !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        Auth.Auth.verifiedContact(user).then(data => {
            if (!core.isEmpty(data.verified)) {
                this.handleAuthStateChange(authTypes.AuthState.SignedIn, user);
            }
            else {
                user = Object.assign(user, data);
                this.handleAuthStateChange(authTypes.AuthState.VerifyContact, user);
            }
        });
    }
    async confirm(event) {
        if (event) {
            event.preventDefault();
        }
        const mfaType = this.user['challengeName'] === authTypes.ChallengeName.SoftwareTokenMFA ? authTypes.ChallengeName.SoftwareTokenMFA : null;
        if (!Auth.Auth || typeof Auth.Auth.confirmSignIn !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            await Auth.Auth.confirmSignIn(this.user, this.code, mfaType);
            this.checkContact(this.user);
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    render() {
        return (index.h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, submitButtonText: this.submitButtonText, loading: this.loading, secondaryFooterContent: index.h("span", null, index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignIn) }, core.I18n.get(Translations.Translations.BACK_TO_SIGN_IN))) }, index.h("amplify-auth-fields", { formFields: this.formFields })));
    }
};

const AmplifyConfirmSignUp = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Fires when sign up form is submitted */
        this.handleSubmit = event => this.confirmSignUp(event);
        /** Used for header text in confirm sign up component */
        this.headerText = core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_HEADER_TEXT);
        /** Used for the submit button text in confirm sign up component */
        this.submitButtonText = core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT);
        /**
         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.
         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing
         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.
         * ```
         * [
         *  {
         *    type: string,
         *    label: string,
         *    placeholder: string,
         *    hint: string | Functional Component | null,
         *    required: boolean
         *  }
         * ]
         * ```
         */
        this.formFields = [];
        /** Auth state change handler for this components
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */
        this.usernameAlias = 'username';
        this.loading = false;
        this.userInput = this.user ? this.user.username : null;
        this._signUpAttrs = this.user && this.user.signUpAttrs ? this.user.signUpAttrs : null;
        this.newFormFields = [];
        this.phoneNumber = {
            countryDialCodeValue: constants.COUNTRY_DIAL_CODE_DEFAULT,
            phoneNumberValue: null,
        };
    }
    componentWillLoad() {
        helpers.checkUsernameAlias(this.usernameAlias);
        this.buildFormFields();
    }
    formFieldsHandler() {
        this.buildFormFields();
    }
    buildDefaultFormFields() {
        this.newFormFields = [
            {
                type: `${this.usernameAlias}`,
                required: true,
                handleInputChange: this.handleFormFieldInputChange(`${this.usernameAlias}`),
                value: this.userInput,
                disabled: this.userInput ? true : false,
            },
            {
                type: 'code',
                label: core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_CODE_LABEL),
                placeholder: core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_CODE_PLACEHOLDER),
                required: true,
                hint: (index.h("div", null, core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.resendConfirmCode() }, core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_RESEND_CODE)))),
                handleInputChange: this.handleFormFieldInputChange('code'),
            },
        ];
    }
    buildFormFields() {
        if (this.formFields.length === 0) {
            this.buildDefaultFormFields();
        }
        else {
            const newFields = [];
            this.formFields.forEach(field => {
                const newField = Object.assign({}, field);
                if (newField.type === 'code') {
                    newField['hint'] = helpers.isHintValid(newField) ? (index.h("div", null, core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.resendConfirmCode() }, core.I18n.get(Translations.Translations.CONFIRM_SIGN_UP_RESEND_CODE)))) : (newField['hint']);
                }
                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);
                newFields.push(newField);
            });
            this.newFormFields = newFields;
        }
    }
    handleFormFieldInputChange(fieldType) {
        switch (fieldType) {
            case 'username':
            case 'email':
                return event => (this.userInput = event.target.value);
            case 'phone_number':
                return event => helpers.handlePhoneNumberChange(event, this.phoneNumber);
            case 'code':
                return event => (this.code = event.target.value);
            default:
                return;
        }
    }
    setFieldValue(field) {
        switch (field.type) {
            case 'username':
            case 'email':
                if (field.value === undefined) {
                    this.userInput = '';
                }
                else {
                    this.userInput = field.value;
                }
                break;
            case 'phone_number':
                if (field.dialCode) {
                    this.phoneNumber.countryDialCodeValue = field.dialCode;
                }
                this.phoneNumber.phoneNumberValue = field.value;
                break;
        }
    }
    handleFormFieldInputWithCallback(event, field) {
        const fnToCall = field['handleInputChange']
            ? field['handleInputChange']
            : (event, cb) => {
                cb(event);
            };
        const callback = this.handleFormFieldInputChange(field.type);
        fnToCall(event, callback.bind(this));
    }
    async resendConfirmCode() {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.resendSignUp !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        try {
            if (!this.userInput)
                throw new Error('Username can not be empty');
            await Auth.Auth.resendSignUp(this.userInput);
            this.handleAuthStateChange(authTypes.AuthState.ConfirmSignUp);
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
    }
    // TODO: Add validation
    // TODO: Prefix
    async confirmSignUp(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.confirmSignUp !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        switch (this.usernameAlias) {
            case 'phone_number':
                try {
                    this.userInput = helpers.composePhoneNumberInput(this.phoneNumber);
                }
                catch (error) {
                    helpers.dispatchToastHubEvent(error);
                }
        }
        try {
            const confirmSignUpResult = await Auth.Auth.confirmSignUp(this.userInput, this.code);
            const user = confirmSignUpResult && this._signUpAttrs && (await Auth.Auth.signIn(this.userInput, this._signUpAttrs.password));
            this.handleAuthStateChange(authTypes.AuthState.SignedIn, user);
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    render() {
        return (index.h("amplify-form-section", { headerText: this.headerText, submitButtonText: this.submitButtonText, handleSubmit: this.handleSubmit, secondaryFooterContent: index.h("div", null, index.h("span", null, index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignIn) }, core.I18n.get(Translations.Translations.BACK_TO_SIGN_IN)))) }, index.h("amplify-auth-fields", { formFields: this.newFormFields })));
    }
    static get watchers() { return {
        "formFields": ["formFieldsHandler"]
    }; }
};

const logger = new core.Logger('ForgotPassword');
const AmplifyForgotPassword = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** The header text of the forgot password section */
        this.headerText = core.I18n.get(Translations.Translations.RESET_YOUR_PASSWORD);
        /** The text displayed inside of the submit button for the form */
        this.submitButtonText = core.I18n.get(Translations.Translations.SEND_CODE);
        /** The form fields displayed inside of the forgot password form */
        this.formFields = [];
        /** The function called when making a request to reset password */
        this.handleSend = event => this.send(event);
        /** The function called when submitting a new password */
        this.handleSubmit = event => this.submit(event);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */
        this.usernameAlias = 'username';
        this.delivery = null;
        this.loading = false;
        this.phoneNumber = {
            countryDialCodeValue: constants.COUNTRY_DIAL_CODE_DEFAULT,
            phoneNumberValue: null,
        };
        this.newFormFields = [];
        this.forgotPasswordAttrs = {
            userInput: '',
            password: '',
            code: '',
        };
    }
    componentWillLoad() {
        helpers.checkUsernameAlias(this.usernameAlias);
        this.buildFormFields();
    }
    formFieldsHandler() {
        this.buildFormFields();
    }
    buildFormFields() {
        if (this.formFields.length === 0) {
            this.buildDefaultFormFields();
        }
        else {
            this.formFields.forEach(field => {
                const newField = Object.assign({}, field);
                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);
                this.newFormFields.push(newField);
            });
        }
    }
    buildDefaultFormFields() {
        switch (this.usernameAlias) {
            case 'email':
                this.newFormFields = [
                    {
                        type: 'email',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('email'),
                        inputProps: {
                            'data-test': 'forgot-password-email-input',
                        },
                    },
                ];
                break;
            case 'phone_number':
                this.newFormFields = [
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('phone_number'),
                        inputProps: {
                            'data-test': 'forgot-password-phone-number-input',
                        },
                    },
                ];
                break;
            case 'username':
            default:
                this.newFormFields = [
                    {
                        type: 'username',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('username'),
                        inputProps: {
                            'data-test': 'forgot-password-username-input',
                        },
                    },
                ];
                break;
        }
    }
    handleFormFieldInputChange(fieldType) {
        switch (fieldType) {
            case 'username':
            case 'email':
                return event => (this.forgotPasswordAttrs.userInput = event.target.value);
            case 'phone_number':
                return event => helpers.handlePhoneNumberChange(event, this.phoneNumber);
            case 'password':
            case 'code':
                return event => (this.forgotPasswordAttrs[fieldType] = event.target.value);
            default:
                return;
        }
    }
    setFieldValue(field, formAttributes) {
        switch (field.type) {
            case 'username':
            case 'email':
                if (field.value === undefined) {
                    formAttributes.userInput = '';
                }
                else {
                    formAttributes.userInput = field.value;
                }
                break;
            case 'phone_number':
                if (field.dialCode) {
                    this.phoneNumber.countryDialCodeValue = field.dialCode;
                }
                this.phoneNumber.phoneNumberValue = field.value;
                break;
            case 'password':
            case 'code':
                if (field.value === undefined) {
                    formAttributes[field.type] = '';
                }
                else {
                    formAttributes[field.type] = field.value;
                }
                break;
        }
    }
    handleFormFieldInputWithCallback(event, field) {
        const fnToCall = field['handleInputChange']
            ? field['handleInputChange']
            : (event, cb) => {
                cb(event);
            };
        const callback = this.handleFormFieldInputChange(field.type);
        fnToCall(event, callback.bind(this));
    }
    async send(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.forgotPassword !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        switch (this.usernameAlias) {
            case 'phone_number':
                try {
                    this.forgotPasswordAttrs.userInput = helpers.composePhoneNumberInput(this.phoneNumber);
                }
                catch (error) {
                    helpers.dispatchToastHubEvent(error);
                }
                break;
        }
        try {
            const data = await Auth.Auth.forgotPassword(this.forgotPasswordAttrs.userInput);
            logger.debug(data);
            this.newFormFields = [
                {
                    type: 'code',
                    required: true,
                    handleInputChange: this.handleFormFieldInputChange('code'),
                    inputProps: {
                        'data-test': 'forgot-password-code-input',
                    },
                },
                {
                    type: 'password',
                    required: true,
                    handleInputChange: this.handleFormFieldInputChange('password'),
                    label: core.I18n.get(Translations.Translations.NEW_PASSWORD_LABEL),
                    placeholder: core.I18n.get(Translations.Translations.NEW_PASSWORD_PLACEHOLDER),
                },
            ];
            this.delivery = data.CodeDeliveryDetails;
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    async submit(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.forgotPasswordSubmit !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            const { userInput, code, password } = this.forgotPasswordAttrs;
            const data = await Auth.Auth.forgotPasswordSubmit(userInput, code, password);
            logger.debug(data);
            this.handleAuthStateChange(authTypes.AuthState.SignIn);
            this.delivery = null;
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    render() {
        const submitFn = this.delivery ? event => this.handleSubmit(event) : event => this.handleSend(event);
        return (index.h("amplify-form-section", { headerText: this.headerText, handleSubmit: submitFn, loading: this.loading, secondaryFooterContent: index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignIn), "data-test": "forgot-password-back-to-sign-in-link" }, core.I18n.get(Translations.Translations.BACK_TO_SIGN_IN)), testDataPrefix: 'forgot-password', submitButtonText: core.I18n.get(Translations.Translations.SEND_CODE) }, index.h("amplify-auth-fields", { formFields: this.newFormFields })));
    }
    static get watchers() { return {
        "formFields": ["formFieldsHandler"]
    }; }
};

const logger$1 = new core.ConsoleLogger('amplify-require-new-password');
const AmplifyRequireNewPassword = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** The header text of the forgot password section */
        this.headerText = core.I18n.get(Translations.Translations.CHANGE_PASSWORD);
        /** The text displayed inside of the submit button for the form */
        this.submitButtonText = core.I18n.get(Translations.Translations.CHANGE_PASSWORD_ACTION);
        /** The function called when submitting a new password */
        this.handleSubmit = event => this.completeNewPassword(event);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /** The form fields displayed inside of the forgot password form */
        this.formFields = [
            {
                type: authTypes.AuthFormField.Password,
                required: true,
                handleInputChange: event => this.handlePasswordChange(event),
                label: core.I18n.get(Translations.Translations.NEW_PASSWORD_LABEL),
                placeholder: core.I18n.get(Translations.Translations.NEW_PASSWORD_PLACEHOLDER),
                inputProps: {
                    'data-test': 'require-new-password-password-input',
                },
            },
        ];
        this.currentUser = this.user;
        this.loading = false;
        this.requiredAttributes = {};
        this.newFormFields = this.formFields;
    }
    handleRequiredAttributeInputChange(attribute, event) {
        this.requiredAttributes[attribute] = event.target.value;
    }
    async componentWillLoad() {
        if (!this.user) {
            // Check for authenticated user
            try {
                const user = await Auth.Auth.currentAuthenticatedUser();
                if (user)
                    this.currentUser = user;
            }
            catch (error) {
                helpers.dispatchToastHubEvent(error);
            }
        }
        if (this.currentUser && this.currentUser.challengeParam.requiredAttributes) {
            const userRequiredAttributes = this.currentUser.challengeParam.requiredAttributes;
            userRequiredAttributes.forEach(attribute => {
                const formField = {
                    type: attribute,
                    required: true,
                    label: helpers.requiredAttributesMap[attribute].label,
                    placeholder: helpers.requiredAttributesMap[attribute].placeholder,
                    handleInputChange: event => this.handleRequiredAttributeInputChange(attribute, event),
                    inputProps: {
                        'data-test': `require-new-password-${attribute}-input`,
                    },
                };
                this.newFormFields.push(formField);
            });
        }
    }
    handlePasswordChange(event) {
        this.password = event.target.value;
    }
    async checkContact(user) {
        if (!Auth.Auth || typeof Auth.Auth.verifiedContact !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        try {
            const data = await Auth.Auth.verifiedContact(user);
            if (!core.isEmpty(data.verified)) {
                this.handleAuthStateChange(authTypes.AuthState.SignedIn, user);
            }
            else {
                user = Object.assign(user, data);
                this.handleAuthStateChange(authTypes.AuthState.VerifyContact, user);
            }
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
    }
    async completeNewPassword(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.completeNewPassword !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            const user = await Auth.Auth.completeNewPassword(this.currentUser, this.password, this.requiredAttributes);
            logger$1.debug('complete new password', user);
            switch (user.challengeName) {
                case authTypes.ChallengeName.SMSMFA:
                    this.handleAuthStateChange(authTypes.AuthState.ConfirmSignIn, user);
                    break;
                case authTypes.ChallengeName.MFASetup:
                    logger$1.debug('TOTP setup', user.challengeParam);
                    this.handleAuthStateChange(authTypes.AuthState.TOTPSetup, user);
                    break;
                default:
                    this.checkContact(user);
            }
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
        finally {
            this.loading = false;
        }
    }
    render() {
        return (index.h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignIn) }, core.I18n.get(Translations.Translations.BACK_TO_SIGN_IN)) }, index.h("amplify-auth-fields", { formFields: this.newFormFields })));
    }
};

const amplifySignInCss = ":host{--footer-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--footer-font-family:var(--amplify-font-family);--font-weight:var(--amplify-font-weight)}.sign-in-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-size);color:var(--footer-color);font-weight:--font-weight;margin-bottom:10px;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}@media (min-width: 672px){.sign-in-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}}.sign-in-form-footer *+*{margin-bottom:15px}";

const logger$2 = new core.Logger('SignIn');
const AmplifySignIn = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Fires when sign in form is submitted */
        this.handleSubmit = event => this.signIn(event);
        /** Used for header text in sign in component */
        this.headerText = core.I18n.get(Translations.Translations.SIGN_IN_HEADER_TEXT);
        /** Used for the submit button text in sign in component */
        this.submitButtonText = core.I18n.get(Translations.Translations.SIGN_IN_ACTION);
        /** Auth state change handler for this component */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */
        this.usernameAlias = 'username';
        /**
         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.
         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing
         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.
         * ```
         * [
         *  {
         *    type: string,
         *    label: string,
         *    placeholder: string,
         *    hint: string | Functional Component | null,
         *    required: boolean
         *  }
         * ]
         * ```
         */
        this.formFields = [];
        /** Hides the sign up link */
        this.hideSignUp = false;
        this.newFormFields = [];
        /* Whether or not the sign-in component is loading */
        this.loading = false;
        this.phoneNumber = {
            countryDialCodeValue: constants.COUNTRY_DIAL_CODE_DEFAULT,
            phoneNumberValue: null,
        };
        this.signInAttributes = {
            userInput: '',
            password: '',
        };
    }
    componentWillLoad() {
        helpers.checkUsernameAlias(this.usernameAlias);
        this.buildFormFields();
    }
    formFieldsHandler() {
        this.buildFormFields();
    }
    handleFormFieldInputChange(fieldType) {
        switch (fieldType) {
            case 'username':
            case 'email':
                return event => (this.signInAttributes.userInput = event.target.value);
            case 'phone_number':
                return event => helpers.handlePhoneNumberChange(event, this.phoneNumber);
            case 'password':
                return event => (this.signInAttributes.password = event.target.value);
        }
    }
    handleFormFieldInputWithCallback(event, field) {
        const fnToCall = field['handleInputChange']
            ? field['handleInputChange']
            : (event, cb) => {
                cb(event);
            };
        const callback = this.handleFormFieldInputChange(field.type);
        fnToCall(event, callback.bind(this));
    }
    checkContact(user) {
        if (!Auth.Auth || typeof Auth.Auth.verifiedContact !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        Auth.Auth.verifiedContact(user).then(data => {
            if (!core.isEmpty(data.verified)) {
                this.handleAuthStateChange(authTypes.AuthState.SignedIn, user);
            }
            else {
                user = Object.assign(user, data);
                this.handleAuthStateChange(authTypes.AuthState.VerifyContact, user);
            }
        });
    }
    async signIn(event) {
        // avoid submitting the form
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.signIn !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        switch (this.usernameAlias) {
            case 'phone_number':
                try {
                    this.signInAttributes.userInput = helpers.composePhoneNumberInput(this.phoneNumber);
                }
                catch (error) {
                    helpers.dispatchToastHubEvent(error);
                }
        }
        try {
            const user = await Auth.Auth.signIn(this.signInAttributes.userInput, this.signInAttributes.password);
            logger$2.debug(user);
            if (user.challengeName === authTypes.ChallengeName.SMSMFA || user.challengeName === authTypes.ChallengeName.SoftwareTokenMFA) {
                logger$2.debug('confirm user with ' + user.challengeName);
                this.handleAuthStateChange(authTypes.AuthState.ConfirmSignIn, user);
            }
            else if (user.challengeName === authTypes.ChallengeName.NewPasswordRequired) {
                logger$2.debug('require new password', user.challengeParam);
                this.handleAuthStateChange(authTypes.AuthState.ResetPassword, user);
            }
            else if (user.challengeName === authTypes.ChallengeName.MFASetup) {
                logger$2.debug('TOTP setup', user.challengeParam);
                this.handleAuthStateChange(authTypes.AuthState.TOTPSetup, user);
            }
            else if (user.challengeName === authTypes.ChallengeName.CustomChallenge &&
                user.challengeParam &&
                user.challengeParam.trigger === 'true') {
                logger$2.debug('custom challenge', user.challengeParam);
                this.handleAuthStateChange(authTypes.AuthState.CustomConfirmSignIn, user);
            }
            else {
                this.checkContact(user);
            }
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
            if (error.code === 'UserNotConfirmedException') {
                logger$2.debug('the user is not confirmed');
                this.handleAuthStateChange(authTypes.AuthState.ConfirmSignUp, { username: this.signInAttributes.userInput });
            }
            else if (error.code === 'PasswordResetRequiredException') {
                logger$2.debug('the user requires a new password');
                this.handleAuthStateChange(authTypes.AuthState.ForgotPassword, { username: this.signInAttributes.userInput });
            }
        }
        finally {
            this.loading = false;
        }
    }
    buildDefaultFormFields() {
        const formFieldInputs = [];
        switch (this.usernameAlias) {
            case 'email':
                formFieldInputs.push({
                    type: 'email',
                    required: true,
                    handleInputChange: this.handleFormFieldInputChange('email'),
                    inputProps: {
                        'data-test': 'sign-in-email-input',
                    },
                });
                break;
            case 'phone_number':
                formFieldInputs.push({
                    type: 'phone_number',
                    required: true,
                    handleInputChange: this.handleFormFieldInputChange('phone_number'),
                    inputProps: {
                        'data-test': 'sign-in-phone-number-input',
                    },
                });
                break;
            case 'username':
            default:
                formFieldInputs.push({
                    type: 'username',
                    required: true,
                    handleInputChange: this.handleFormFieldInputChange('username'),
                    inputProps: {
                        'data-test': 'sign-in-username-input',
                    },
                });
                break;
        }
        formFieldInputs.push({
            type: 'password',
            hint: (index.h("div", null, core.I18n.get(Translations.Translations.FORGOT_PASSWORD_TEXT), ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.ForgotPassword), "data-test": "sign-in-forgot-password-link" }, core.I18n.get(Translations.Translations.RESET_PASSWORD_TEXT)))),
            required: true,
            handleInputChange: this.handleFormFieldInputChange('password'),
            inputProps: {
                'data-test': 'sign-in-password-input',
            },
        });
        this.newFormFields = [...formFieldInputs];
    }
    buildFormFields() {
        if (this.formFields.length === 0) {
            this.buildDefaultFormFields();
        }
        else {
            const newFields = [];
            this.formFields.forEach(field => {
                const newField = Object.assign({}, field);
                // TODO: handle hint better
                if (newField.type === 'password') {
                    newField['hint'] = helpers.isHintValid(newField) ? (index.h("div", null, core.I18n.get(Translations.Translations.FORGOT_PASSWORD_TEXT), ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.ForgotPassword), "data-test": "sign-in-forgot-password-link" }, core.I18n.get(Translations.Translations.RESET_PASSWORD_TEXT)))) : (newField['hint']);
                }
                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);
                this.setFieldValue(newField, this.signInAttributes);
                newFields.push(newField);
            });
            this.newFormFields = newFields;
        }
    }
    setFieldValue(field, formAttributes) {
        switch (field.type) {
            case 'username':
            case 'email':
                if (field.value === undefined) {
                    formAttributes.userInput = '';
                }
                else {
                    formAttributes.userInput = field.value;
                }
                break;
            case 'phone_number':
                if (field.dialCode) {
                    this.phoneNumber.countryDialCodeValue = field.dialCode;
                }
                this.phoneNumber.phoneNumberValue = field.value;
                break;
            case 'password':
                if (field.value === undefined) {
                    formAttributes.password = '';
                }
                else {
                    formAttributes.password = field.value;
                }
                break;
        }
    }
    render() {
        return (index.h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, testDataPrefix: 'sign-in' }, index.h("amplify-federated-buttons", { handleAuthStateChange: this.handleAuthStateChange, federated: this.federated }), !core.isEmpty(this.federated) && index.h("amplify-strike", null, "or"), index.h("amplify-auth-fields", { formFields: this.newFormFields }), index.h("div", { slot: "amplify-form-section-footer", class: "sign-in-form-footer" }, index.h("slot", { name: "footer" }, index.h("slot", { name: "secondary-footer-content" }, !this.hideSignUp ? (index.h("span", null, core.I18n.get(Translations.Translations.NO_ACCOUNT_TEXT), ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignUp), "data-test": "sign-in-create-account-link" }, core.I18n.get(Translations.Translations.CREATE_ACCOUNT_TEXT)))) : (index.h("span", null))), index.h("slot", { name: "primary-footer-content" }, index.h("amplify-button", { type: "submit", disabled: this.loading, "data-test": "sign-in-sign-in-button" }, index.h("amplify-loading-spinner", { style: { display: this.loading ? 'initial' : 'none' } }), index.h("span", { style: { display: this.loading ? 'none' : 'initial' } }, this.submitButtonText)))))));
    }
    static get watchers() { return {
        "formFields": ["formFieldsHandler"]
    }; }
};
AmplifySignIn.style = amplifySignInCss;

const amplifySignUpCss = ":host{--footer-font-family:var(--amplify-font-family);--footer-font-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--font-weight:var(--amplify-font-weight)}.sign-up-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-font-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}@media (min-width: 672px){.sign-up-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}}.sign-up-form-footer *+*{margin-bottom:15px}";

const AmplifySignUp = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Fires when sign up form is submitted */
        this.handleSubmit = event => this.signUp(event);
        /** Used for header text in sign up component */
        this.headerText = core.I18n.get(Translations.Translations.SIGN_UP_HEADER_TEXT);
        /** Used for the submit button text in sign up component */
        this.submitButtonText = core.I18n.get(Translations.Translations.SIGN_UP_SUBMIT_BUTTON_TEXT);
        /** Used for the submit button text in sign up component */
        this.haveAccountText = core.I18n.get(Translations.Translations.SIGN_UP_HAVE_ACCOUNT_TEXT);
        /** Used for the submit button text in sign up component */
        this.signInText = core.I18n.get(Translations.Translations.SIGN_IN_TEXT);
        /**
         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.
         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing
         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.
         * ```
         * [
         *  {
         *    type: string,
         *    label: string,
         *    placeholder: string,
         *    hint: string | Functional Component | null,
         *    required: boolean
         *  }
         * ]
         * ```
         */
        this.formFields = [];
        /** Auth state change handler for this component
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */
        this.usernameAlias = 'username';
        // private userInput: string | PhoneNumberInterface;
        this.newFormFields = [];
        this.phoneNumber = {
            countryDialCodeValue: constants.COUNTRY_DIAL_CODE_DEFAULT,
            phoneNumberValue: null,
        };
        this.loading = false;
        this.signUpAttributes = {
            username: '',
            password: '',
            attributes: {},
        };
    }
    handleFormFieldInputChange(fieldType) {
        switch (fieldType) {
            case 'username':
                return event => (this.signUpAttributes.username = event.target.value);
            case 'password':
                return event => (this.signUpAttributes.password = event.target.value);
            case 'email':
                return event => (this.signUpAttributes.attributes.email = event.target.value);
            case 'phone_number':
                return event => helpers.handlePhoneNumberChange(event, this.phoneNumber);
            default:
                return event => (this.signUpAttributes.attributes[fieldType] = event.target.value);
        }
    }
    handleFormFieldInputWithCallback(event, field) {
        const fnToCall = field['handleInputChange']
            ? field['handleInputChange']
            : (event, cb) => {
                cb(event);
            };
        const callback = this.handleFormFieldInputChange(field.type);
        fnToCall(event, callback.bind(this));
    }
    // TODO: Add validation
    // TODO: Prefix
    async signUp(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth.Auth || typeof Auth.Auth.signUp !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        if (this.phoneNumber.phoneNumberValue) {
            try {
                this.signUpAttributes.attributes.phone_number = helpers.composePhoneNumberInput(this.phoneNumber);
            }
            catch (error) {
                helpers.dispatchToastHubEvent(error);
            }
        }
        switch (this.usernameAlias) {
            case 'email':
            case 'phone_number':
                this.signUpAttributes.username = this.signUpAttributes.attributes[this.usernameAlias];
                break;
        }
        try {
            const data = await Auth.Auth.signUp(this.signUpAttributes);
            this.handleAuthStateChange(authTypes.AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), { signUpAttrs: this.signUpAttributes }));
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
        }
    }
    buildDefaultFormFields() {
        switch (this.usernameAlias) {
            case 'email':
                this.newFormFields = [
                    {
                        type: 'email',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('email'),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('password'),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('phone_number'),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                ];
                break;
            case 'phone_number':
                this.newFormFields = [
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('phone_number'),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('password'),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'email',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('email'),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                ];
                break;
            case 'username':
            default:
                this.newFormFields = [
                    {
                        type: 'username',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_USERNAME_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('username'),
                        inputProps: {
                            'data-test': 'sign-up-username-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('password'),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'email',
                        placeholder: core.I18n.get(Translations.Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('email'),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: this.handleFormFieldInputChange('phone_number'),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                ];
                break;
        }
    }
    buildFormFields() {
        if (this.formFields.length === 0) {
            this.buildDefaultFormFields();
        }
        else {
            const newFields = [];
            this.formFields.forEach(field => {
                const newField = Object.assign({}, field);
                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);
                this.setFieldValue(field, this.signUpAttributes);
                newFields.push(newField);
            });
            this.newFormFields = newFields;
        }
    }
    setFieldValue(field, formAttributes) {
        switch (field.type) {
            case 'username':
                if (field.value === undefined) {
                    formAttributes.username = '';
                }
                else {
                    formAttributes.username = field.value;
                }
                break;
            case 'password':
                if (field.value === undefined) {
                    formAttributes.password = '';
                }
                else {
                    formAttributes.password = field.value;
                }
                break;
            case 'email':
                formAttributes.attributes.email = field.value;
                break;
            case 'phone_number':
                if (field.dialCode) {
                    this.phoneNumber.countryDialCodeValue = field.dialCode;
                }
                this.phoneNumber.phoneNumberValue = field.value;
                break;
            default:
                formAttributes.attributes[field.type] = field.value;
                break;
        }
    }
    componentWillLoad() {
        helpers.checkUsernameAlias(this.usernameAlias);
        this.buildFormFields();
    }
    formFieldsHandler() {
        this.buildFormFields();
    }
    render() {
        return (index.h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, testDataPrefix: 'sign-up' }, index.h("amplify-auth-fields", { formFields: this.newFormFields }), index.h("div", { class: "sign-up-form-footer", slot: "amplify-form-section-footer" }, index.h("slot", { name: "footer" }, index.h("slot", { name: "secondary-footer-content" }, index.h("span", null, this.haveAccountText, ' ', index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignIn), "data-test": "sign-up-sign-in-link" }, this.signInText))), index.h("slot", { name: "primary-footer-content" }, index.h("amplify-button", { type: "submit", "data-test": "sign-up-create-account-button" }, index.h("amplify-loading-spinner", { style: { display: this.loading ? 'initial' : 'none' } }), index.h("span", { style: { display: this.loading ? 'none' : 'initial' } }, this.submitButtonText)))))));
    }
    static get watchers() { return {
        "formFields": ["formFieldsHandler"]
    }; }
};
AmplifySignUp.style = amplifySignUpCss;

const amplifyToastCss = ":host{--background-color:var(--amplify-secondary-tint);--color:var(--amplify-white);--font-size:var(--amplify-text-sm);--font-family:var(--amplify-font-family);--close-icon-color:var(--amplify-white);--close-icon-hover:var(--amplify-red)}.toast-icon{padding-right:5px}.toast{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;position:absolute;top:0;left:0;width:100%;z-index:99;-webkit-box-shadow:0 0 5px 0 rgba(0, 0, 0, 0.3);box-shadow:0 0 5px 0 rgba(0, 0, 0, 0.3);padding:16px;background-color:var(--background-color);font-size:var(--font-size);color:var(--color);-webkit-box-sizing:border-box;box-sizing:border-box;border-radius:5px;font-family:var(--font-family)}.toast>span{margin-right:10px}.toast-close{margin-left:auto;-ms-flex-item-align:center;align-self:center;position:relative;width:18px;height:18px;overflow:hidden;cursor:pointer;background:transparent;border:none}.toast-close::before,.toast-close::after{content:\"\";position:absolute;height:2px;width:100%;top:50%;left:0;margin-top:-1px;background:var(--close-icon-color)}.toast-close:hover::before,.toast-close:hover::after{background:var(--close-icon-hover)}.toast-close::before{-webkit-transform:rotate(45deg);-moz-transform:rotate(45deg);-ms-transform:rotate(45deg);-o-transform:rotate(45deg);transform:rotate(45deg)}.toast-close::after{-webkit-transform:rotate(-45deg);-moz-transform:rotate(-45deg);-ms-transform:rotate(-45deg);-o-transform:rotate(-45deg);transform:rotate(-45deg)}";

const AmplifyToast = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Message to be displayed inside the toast*/
        this.message = '';
    }
    /*
    TODO #170365145: Work on a helper function that will populate and
    update class colors for success / warning / failure messages
    */
    render() {
        return (index.h("div", { class: "toast" }, index.h("amplify-icon", { class: "toast-icon", name: "warning" }), this.message ? index.h("span", null, this.message) : null, index.h("slot", null), index.h("button", { class: "toast-close", onClick: this.handleClose })));
    }
};
AmplifyToast.style = amplifyToastCss;

const logger$3 = new core.Logger('AmplifyVerifyContact');
const AmplifyVerifyContact = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** Authentication state handler */
        this.handleAuthStateChange = helpers.dispatchAuthStateChangeEvent;
        this.loading = false;
    }
    handleSubmit(event) {
        event.preventDefault();
        this.verifyAttr ? this.submit(this.code) : this.verify(this.contact);
    }
    async submit(code) {
        const attr = this.verifyAttr;
        if (!Auth.Auth || typeof Auth.Auth.verifyCurrentUserAttributeSubmit !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            const data = await Auth.Auth.verifyCurrentUserAttributeSubmit(attr, code);
            logger$3.debug(data);
            this.handleAuthStateChange(authTypes.AuthState.SignedIn, this.user);
            this.verifyAttr = null;
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
            logger$3.error(error);
        }
        finally {
            this.loading = false;
        }
    }
    async verify(contact) {
        if (!contact) {
            logger$3.error('Neither Email nor Phone Number selected');
            return;
        }
        if (!Auth.Auth || typeof Auth.Auth.verifyCurrentUserAttribute !== 'function') {
            throw new Error(constants.NO_AUTH_MODULE_FOUND);
        }
        this.loading = true;
        try {
            const data = await Auth.Auth.verifyCurrentUserAttribute(contact);
            logger$3.debug(data);
            this.verifyAttr = contact;
        }
        catch (error) {
            helpers.dispatchToastHubEvent(error);
            logger$3.error(error);
        }
        finally {
            this.loading = false;
        }
    }
    handleInputChange(event) {
        const inputName = event.target.name;
        if (inputName === 'code') {
            this.code = event.target.value;
        }
        else if (inputName === 'contact') {
            this.contact = event.target.value;
        }
    }
    renderSubmit() {
        return (index.h("div", null, index.h("amplify-input", { inputProps: {
                autocomplete: 'off',
                'data-test': 'verify-contact-code-input',
            }, name: "code", placeholder: core.I18n.get(Translations.Translations.CODE_PLACEHOLDER), handleInputChange: event => this.handleInputChange(event) })));
    }
    renderVerify() {
        const user = this.user;
        if (!user) {
            logger$3.debug('No user to verify');
            return null;
        }
        const { unverified } = user;
        if (!unverified) {
            logger$3.debug('Unverified variable does not exist on user');
            return null;
        }
        const { email, phone_number } = unverified;
        return (index.h("div", null, email && (index.h("amplify-radio-button", { label: core.I18n.get(Translations.Translations.VERIFY_CONTACT_EMAIL_LABEL), key: "email", name: "contact", value: "email", handleInputChange: event => this.handleInputChange(event), inputProps: {
                'data-test': 'verify-contact-email-radio',
            } })), phone_number && (index.h("amplify-radio-button", { label: core.I18n.get(Translations.Translations.VERIFY_CONTACT_PHONE_LABEL), key: "phone_number", name: "contact", value: "phone_number", handleInputChange: event => this.handleInputChange(event), inputProps: {
                'data-test': 'verify-contact-email-radio',
            } }))));
    }
    render() {
        return (index.h("amplify-form-section", { handleSubmit: event => this.handleSubmit(event), headerText: core.I18n.get(Translations.Translations.VERIFY_CONTACT_HEADER_TEXT), loading: this.loading, secondaryFooterContent: index.h("span", null, index.h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(authTypes.AuthState.SignedIn, this.user) }, "Skip")), submitButtonText: this.verifyAttr
                ? core.I18n.get(Translations.Translations.VERIFY_CONTACT_SUBMIT_LABEL)
                : core.I18n.get(Translations.Translations.VERIFY_CONTACT_VERIFY_LABEL) }, this.verifyAttr ? this.renderSubmit() : this.renderVerify()));
    }
};

exports.amplify_confirm_sign_in = AmplifyConfirmSignIn;
exports.amplify_confirm_sign_up = AmplifyConfirmSignUp;
exports.amplify_forgot_password = AmplifyForgotPassword;
exports.amplify_require_new_password = AmplifyRequireNewPassword;
exports.amplify_sign_in = AmplifySignIn;
exports.amplify_sign_up = AmplifySignUp;
exports.amplify_toast = AmplifyToast;
exports.amplify_verify_contact = AmplifyVerifyContact;
